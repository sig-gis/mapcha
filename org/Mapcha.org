* Database Initialization

1. Install the latest versions of Postgresql and PostGIS.

2. Start the Postgresql database server running on your machine on the
   default port (5432).

3. From your shell, run "psql -U postgres" to connect as the database
   superuser.

4. At the psql prompt, run these commands:

   #+name: create-mapcha-database
   #+begin_src sql :engine postgresql :cmdline -U postgres :results silent :exports code
   CREATE ROLE gjohnson WITH LOGIN CREATEDB;
   CREATE DATABASE mapcha WITH OWNER gjohnson;
   \c mapcha
   CREATE EXTENSION postgis;
   #+end_src

   This will create a new database called "mapcha" owned by user
   "gjohnson" and add the PostGIS spatial extensions to it. I
   hard-coded the "gjohnson" user name into the Mapcha website code as
   I was developing it since that made interacting with the database
   easier on my machine. I will likely change it to something more
   generic (like "mapcha") before releasing the production version of
   the site, but for now, you'll just need to work with this gjohnson
   user account.

5. From your shell, run "psql -U gjohnson -f build_mapcha_tables.sql -d
   mapcha" to populate the new mapcha database with the table schema
   expected by the website code.

6. Launch the Mapcha website by running "boot dev" from within the
   mapcha directory that you cloned from GitHub.

7. Point your web browser at http://localhost:8080 to access the site.

8. Register a new user account called "admin@sig-gis.com" with whatever
   password you like.

9, From your shell, run "psql -U gjohnson -d mapcha" to connect to the
   mapcha database as the gjohnson user.

10. At the psql prompt, run this command to elevate admin@sig-gis.com
    to the admin role.

    #+name: grant-admin-role-to-admin-user
    #+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
    UPDATE mapcha.users
      SET role='admin'
      WHERE email='admin@sig-gis.com';
    #+end_src

11. Logout and back in as admin@sig-gis.com on the Mapcha website. You
    should now see both the Account, Dashboard, and Admin links in the
    navigation bar, and both of these pages should work for you.

12. Visit the Admin link and create a new project. All fields must be
    filled in. To input the bounding box coordinates, use ctrl+drag on
    the map interface. You can repeat this as many times as you would
    like, and it will always save the last bounding box drawn this
    way. Remember to enter several sample value categories (try 6-8 to
    start with) along with sensible colors.

    Here are the settings for a few test projects that I created:

    =========================================================
    - Name :: Mekong River Region
    - Description :: Laos, Cambodia, Vietnam, Thailand, Myanmar
    - Number of plots :: 10000
    - Plot radius in meters :: 100
    - Number of samples per plot :: 15
    - Categories per sample :: Forest, Grassland, Bare Surface, Impervious Surface, Agriculture, Urban, Water, Cloud, Unknown
    - Latitude Max :: 22.5
    - Longitude Min :: 95
    - Longitude Max :: 107
    - Latitude Min :: 10.5
    =========================================================
    - Name :: California, USA
    - Description :: The most populous state in the United States.
    - Number of plots :: 1000
    - Plot radius in meters :: 50
    - Number of samples per plot :: 5
    - Categories per sample :: Rock/Sand, Grasses, Crops, Shrubs, Trees, Roads/Parking Lots, Buildings, Water, Unknown
    - Latitude Max :: 42.0
    - Longitude Min :: -124.6
    - Longitude Max :: -114.0
    - Latitude Min :: 32.3
    =========================================================
    - Name :: Mongolia
    - Description :: The land of yurt-dwelling pastoral nomads.
    - Number of plots :: 5000
    - Plot radius in meters :: 200
    - Number of samples per plot :: 20
    - Categories per sample :: Settlement, Road, Rock/Sand, Grasses, Trees, Water, Snow, Unknown
    - Latitude Max :: 52.5
    - Longitude Min :: 87.0
    - Longitude Max :: 120.5
    - Latitude Min :: 41.5
    =========================================================

#+name: build-mapcha-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code :tangle ../resources/sql/build_mapcha_tables.sql :padline no
CREATE SCHEMA mapcha;

CREATE TABLE mapcha.projects (
  id          serial primary key,
  name        text not null,
  description text,
  boundary    geometry(Polygon,4326),
  archived    boolean default false
);

CREATE TABLE mapcha.plots (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  center     geometry(Point,4326),
  radius     double precision not null,
  flagged    boolean default false
);

CREATE INDEX mapcha_plots_project_id ON mapcha.plots (project_id);

CREATE TABLE mapcha.samples (
  id      serial primary key,
  plot_id integer not null references mapcha.plots (id) on delete cascade on update cascade,
  point   geometry(Point,4326)
);

CREATE INDEX mapcha_samples_plot_id ON mapcha.samples (plot_id);

CREATE TABLE mapcha.sample_values (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  value      text not null
  color      text not null;
  image      text;
);

CREATE INDEX mapcha_sample_values_project_id ON mapcha.sample_values (project_id);

CREATE TABLE mapcha.imagery (
  id          serial primary key,
  title       text not null,
  date        date,
  url         text not null,
  attribution text
);

CREATE TABLE mapcha.users (
  id        serial primary key,
  email     text not null,
  password  text not null,
  role      text not null,
  reset_key text,
  ip_addr   inet
);

CREATE INDEX mapcha_users_email ON mapcha.users (email);

CREATE TABLE mapcha.user_samples (
  id           serial primary key,
  user_id      integer not null references mapcha.users (id) on delete cascade on update cascade,
  sample_id    integer not null references mapcha.samples (id) on delete cascade on update cascade,
  value_id     integer not null references mapcha.sample_values (id) on delete cascade on update cascade,
  imagery_id   integer not null references mapcha.imagery (id) on delete cascade on update cascade,
  date         date
);

CREATE INDEX mapcha_user_samples_user_id ON mapcha.user_samples (user_id);
CREATE INDEX mapcha_user_samples_sample_id ON mapcha.user_samples (sample_id);
#+end_src

* Web Mapping Options

  - Google Earth :: desktop application (OpenForis CollectEarth is built on this)
  - Google Earth API :: 3D globe in browser (DEPRECATED)
  - Google Earth Engine (API) :: web-based tool for geospatial analysis (NOT FOR CUSTOM WEB INTERFACES)
  - Google Maps API :: commercial 2D web mapping API with 15m earth imagery
  - Bing Maps API :: commercial 2D web mapping API from Microsoft
  - OpenLayers :: open source 2D web mapping API (BIG)
  - Leaflet :: open source 2D web mapping API (SMALL)
  - Cesium :: open source 3D globe in browser

  *Solution*: OpenLayers w/ hi-res DigitGlobe basemap imagery.
              Incorporate Cesium through ol3-cesium module.

* TODOs
** WTF?
   - [X] Where is that rogue XMLHttpRequest coming from on every page of mapcha.sig-gis.com? Have I been hacked?

** Admin page
   - [X] Zoom out to worldview when page first loads
   - [X] Show bounding box on map as lat/lon coords are input
   - [X] Show project bounding box on map when switching between projects
   - [X] Enable editing the names and colors of sample values in existing projects
   - [X] Allow drawing a polygon on the map or uploading a shapefile
   - [X] Add a download link for plot-level aggregate data for the current project
     - Filename: mapcha_<project>_<date>.csv
     - Fields: plot_id, center_lat, center_lon, radius_m, sample_points, user_assigments, value1_mean, value1_stddev, value2_mean, value2_stddev, ..., valueN_mean, valueN_stddev
   - [X] Add a download link for all samples in the current project
     - Filename: mapcha_<project>_<date>.csv
     - Fields: plot_id, center_lat, center_lon, radius_m, sample_points, user_assigments, value1_mean, value1_stddev, value2_mean, value2_stddev, ..., valueN_mean, valueN_stddev
   - [X] Add regular grid for samples
   - [X] Fix styles so the page grows and shrinks with the Sample Values table
   - [ ] Fix image file upload http://www.html5rocks.com/en/tutorials/file/dndfiles/
   - [ ] Batch together the database inserts into just a few calls
   - [ ] Change random point distribution algorithm to one which prevents overlap
   - [ ] Allow uploading a plot file
   - [ ] Allow selecting the imagery datasource (Digital Globe, Google Earth Engine?, locally hosted "chipset", other image server)
   - [ ] Add UA form validators (through html input tag options)

** User Management page
   - [ ] Create a panel for reviewing, editing (change role to user or admin), and deleting users

** Dashboard page
   - [X] Add meters to Sidebar for:
     - "Samples completed" :: # of samples completed in current plot
     - "Plots completed" :: # of plots completed in current project
     - "Agreement with other users on this plot" :: % of samples matching other users' samples in this plot
     - "Agreement with other users" :: % of samples matching other users' samples in current project
   - [ ] Make the size of sample circles vary with the zoom level
   - [ ] Show text descriptions and example images when hovering over sample values in the radio list
   - [ ] Make the p#imagery-source element's contents dynamic (and check on the month and year of the DigitalGlobe data)
   - [ ] Adjust the SQL query for get-random-plot-sql to try and pick less sampled plots
     - Assign plots in order by plot_id to users and track last plot_id analyzed by each user
     - After a plot has been assessed three times, remove it from the selection pool and start with the next consecutive plot_id

** Login page
   - Include Facebook authentication as a login option

** Registration page
   - Store the user's IP address in the mapcha.users table when they make a new account
   - Add "First Name", "Last Name", "Institution", and "Phone#" fields to Register and Account pages

** Home page
   - Add a Mapcha description
   - Show study area on a map with plots highlighted (use color ramp red-green based on number of samples filled in)

** Misc ideas
   - Setup SSL communications for the website, so that it works over HTTPS
   - Incorporate Cesium into the map interfaces for a 3D globe option https://github.com/openlayers/ol3-cesium
